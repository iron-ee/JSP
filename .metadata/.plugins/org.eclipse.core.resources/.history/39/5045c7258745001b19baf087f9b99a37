package com.cos.hello.controller;

import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
// javax로 시작하는 패키지는 톰캣이 들고있는 라이브러리  
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.cos.hello.config.DBConn;
import com.cos.hello.dao.UsersDao;
import com.cos.hello.model.Users;

public class UserController extends HttpServlet{
	
	// req와 res는 톰캣이 만들어준다. (클라이언트의 요청이 있을 때 마다)
	// req는 BufferedReader 할 수 있는 ByteStream
	// res는 BufferedWriter 할 수 있는 ByteStream
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		System.out.println("get 요청");
		doProcess(req, resp);
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		System.out.println("post 요청");
		doProcess(req, resp);
	}
	
	protected void doProcess(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		System.out.println("userController 실행 됨");
		String gubun = req.getParameter("gubun");
		System.out.println(gubun);
		route(gubun, req, resp);
		
		}
	
	
	private void route(String gubun, HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		
		if (gubun.equals("login")) {
			resp.sendRedirect("auth/login.jsp");
		}else if (gubun.equals("join")) {
			resp.sendRedirect("auth/join.jsp");
		}else if (gubun.equals("selectOne")) {		// 유저 정보 보기
			// 인증이 필요한 페이지
			String result;
			HttpSession session = req.getSession();
			if (session.getAttribute("sessionUser") != null) {		// 인증 끝
				Users user = (Users)session.getAttribute("sessionUser");
				result = "인증되었습니다.";
				System.out.println(user);
			}else {
				result = "인증되지않았습니다.";
			}
			req.setAttribute("result", result);
			RequestDispatcher dis = req.getRequestDispatcher("user/selectOne.jsp");
			dis.forward(req, resp);
		}else if (gubun.equals("updateOne")) {
			resp.sendRedirect("user/updateOne.jsp");
		}else if (gubun.equals("joinProc")) {	// 회원가입 수행해줘
			// 데이터 원형   username=doyeck&password=1234&email=doyeck@naver.com
			
			// 1번 form의 input 태그에 있는 3가지 값 username, password, email 받기
			
			// meter 함수는 get방식의 데이터와 post방식의 데이터를 다 받을 수 있음.
			// 방식에서는 데이터 타입이 x-www-form-urlencoded 방식만 받을 수 있음
			String username = req.getParameter("username");
			String password = req.getParameter("password");
			String email = req.getParameter("email");
			// req.getParameter  => 얘가 다 알아서 파싱 해줌   그냥 개 꿀
		
			System.out.println("================joinProc Start================");
			System.out.println(username);
			System.out.println(password);
			System.out.println(email);
			System.out.println("================joinProc End================");
			
			Users user = Users.builder()
					.username(username)
					.password(password)
					.email(email)
					.build();
			
			UsersDao usersDao = new UsersDao();
			int result = usersDao.회원가입(user);
			
			// 2번 DB에 연결해서 3가지 값을 INSERT 하기
			StringBuffer sb = new StringBuffer();		// String 전용 컬렉션 ( 동기화 )
			sb.append("INSERT INTO users(username, password, email)");
			sb.append("VALUES(?,?,?)");
			String sql = sb.toString();
			Connection conn = DBConn.getinstance();
			try {
				PreparedStatement pstmt = conn.prepareStatement(sql);
				pstmt.setString(1, username);
				pstmt.setString(2, password);
				pstmt.setString(3, email);
				int result = pstmt.executeUpdate(); 	// 변경된 행의 개수를 리턴
				if (result == 1) {
					// 3번 INSERT가 정상적으로 되었다면 index.jsp를 응답하기 !
					resp.sendRedirect("auth/login.jsp");
				}else {
					resp.sendRedirect("auth/join.jsp");
				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			

		}else if (gubun.equals("loginProc")) {
			// 1번  전달되는 값 받기
			String username = req.getParameter("username");
			String password = req.getParameter("password");
			System.out.println("================loginProc Start================");
			System.out.println(username);
			System.out.println(password);
			System.out.println("================loginProc End================");
			// 2번 데이터베이스 값이 있는 select 해서 확인
			// 생략
			Users user = Users.builder()
					.id(1)
					.username(username)
					.build();
			// 3번
			HttpSession session = req.getSession();
			// session에는 사용자 패스워드 절대 넣지 않기
			session.setAttribute("sessionKey", user);
//			resp.setHeader("Set-Cookie", "sessionKey=9998");
			// 모든 응답에는 jSessionid가 쿠키로 추가된다.
			
			// 4번 index.jsp 페이지로 이동
			resp.sendRedirect("index.jsp");
		}
	}
}

