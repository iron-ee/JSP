
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;

import config.DBConnection;
import lombok.Builder;

import model.Dept;

@Builder

public class MainApp {

	public static void 추가(int id) {
		// " " 안에 ; 를 넣으면 절대로 안 됨.   넣는 순간 DB 개 망함
		String sql = "INSERT INTO test1(id) VALUES(?)";
		Connection conn = DBConnection.getinstance();
		// 인터페이스가 적용되어 있는 함수. ( 따로 인터페이스 (프로토콜) 를 만들지 않아도 된다.
		try {
			// conn 으로 버퍼를 만들어서 통신해주는 코드.
			PreparedStatement pstmt = conn.prepareStatement(sql);
			// 인젝션 공격을 다 막아주는 코드
			pstmt.setInt(1, id);
			
			// 요청에 응답하는 방법
			// pstmt.executeUpdate();  => 변경된 rowcount를 리턴한다.
			// 만약 2개를 변경했는데 값이 1이 나온다면 변경 실패 인거
			// - 1 값은 오류시에 리턴 값
			int result =  pstmt.executeUpdate();	// 
			System.out.println("result : "+result);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void 삭제(int id) {
		String sql = "DELETE FROM test1 WHERE id = ?";
		Connection conn = DBConnection.getinstance();
		try {
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, id);
			int result =  pstmt.executeUpdate();	// 
			System.out.println("result : "+result);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static void 수정(int id) {
		String sql = "UPDATE test1 SET id  = ?";
		Connection conn = DBConnection.getinstance();
		try {
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, id);
			int result =  pstmt.executeUpdate();	// 
			System.out.println("result : "+result);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public static Dept 찾기(int deptno) {
		String sql = "SELECT deptno, dname, loc FROM dept WHERE deptno = ?";
		Connection conn = DBConnection.getinstance();
		try {
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, deptno);
			ResultSet rs = pstmt.executeQuery();
			// select  방법
			// rs = 결과 집합
			// 커서를 한 칸씩 내려서 찾는 방식 (중요함)
			if (rs.next()) {   // 커서가 한 칸 내려갔다.
				Dept dept = Dept.builder()
						.deptno(rs.getInt("deptno"))
						.dname(rs.getString("dname"))
						.loc(rs.getString("loc"))
						.build();
				System.out.println(dept);
				return dept;
				
//				int deptno2 = rs.getInt("deptno");
//				String dname =rs.getString("dname");
//				String loc = rs.getString("loc");
//				System.out.println(deptno2);
//				System.out.println(dname);
//				System.out.println(loc);
				
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public static List<Dept> 전체찾기() {
		String sql = "SELECT deptno, dname, loc FROM dept";
		Connection conn = DBConnection.getinstance();
		try {
			PreparedStatement pstmt = conn.prepareStatement(sql);
			
			ResultSet rs = pstmt.executeQuery();
			
			int count = 0;
			Vector<Dept> vc = new Vector<>();
			
			while (rs.next()) {
				Dept dept = Dept.builder()
						.deptno(rs.getInt("deptno"))
						.dname(rs.getString("dname"))
						.loc(rs.getString("loc"))
						.build();
				vc.add(dept);
			}
			return vc;
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public static void main(String[] args) {

		
		List<Dept> depts = 전체찾기();
	}
}
